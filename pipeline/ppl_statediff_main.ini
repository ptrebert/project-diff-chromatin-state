[Run]
load_path= /home/pebert/work/code/mpggit/statediff
load_name= pipeline.ppl_statediff_main
mkdir= ${EnvPaths:workdir}

[References]
ref_base= /TL/deep/fhgfs/projects/pebert/thesis/refdata
repo_base= /home/pebert/work/code/mpggit/statediff
hg38_chromlen= ${ref_base}/chromsizes/chrom_wg/ihec38_chrom_wg.tsv
hg38_chromkeep= ${ref_base}/chromsizes/chrom_augo/ihec38_chrom_augo.bed
# trimmed version with blunt-end intervals for EpiCSeg
hg38_chrom_esc= ${EnvPaths:workdir}/references/ihec38_chrom_augo_trim.bed
hg19_chromlen= ${ref_base}/chromsizes/chrom_wg/hg19_chrom_wg.tsv
cmm_model= ${repo_base}/annotation/chromhmm_18/model_18_core_K27ac.txt
cmm_label= ${repo_base}/annotation/chromhmm_18/browserlabelmap_18_core_K27ac.tab
cmm_color= ${repo_base}/annotation/chromhmm_18/colormap_18_core_K27ac.tab
cmm_emissions= ${repo_base}/annotation/chromhmm_18/emissions_18_core_K27ac.txt
remc_design= ${repo_base}/annotation/remc_design.tsv
hepg2_p300= ${EnvPaths:workdir}/references/ENCODE_HepG2_EP300_peaks_1-22X.bed

[Pipeline]
name= STDIFF

assume_complete= True
weekend= False
use_scorings= emission replicate
sciddo_deep_groups = CELLTYPE_HG CELLTYPE_He CELLTYPE_Ma CELLTYPE_Mo
deep_subset = 01_Hc01_LiHG_Ct 01_Hc02_LiHG_Ct 43_Hm01_BlMo_Ct 43_Hm03_BlMa_Ct
              43_Hm03_BlMo_Ct 43_Hm05_BlMa_Ct 43_Hm05_BlMo_Ct 41_Hf02_LiHe_Ct
              41_Hf03_LiHe_Ct

bam_qfilter= sambamba view --format=bam --nthreads=7 --output-filename {outputfile} --regions=${References:hg38_chromkeep}
             --filter="not (duplicate or unmapped or failed_quality_control or supplementary or secondary_alignment) and mapping_quality >= 5"
             {inputfile}

bam_qname_sort= sambamba sort --memory-limit=40GiB --out={{outputfile}}
                --nthreads=5 --sort-by-name {{inputfile}}

; First, segment with pretrained REMC ChromHMM model
; Second, create additional segmentations using EpiCSeg
; with two different state assignments to check if the
; results of SolidState are dependent on the number of states

cmm_binbam= ChromHMM.sh BinarizeBam -b 200 ${References:hg38_chromlen} {inputdir} {{{{inputfile}}}} {outputdir}
cmm_mkseg= ChromHMM.sh MakeSegmentation -b 200 -l ${References:hg38_chromlen}
            ${References:cmm_model} {inputdir} {outputdir} && touch {{outputfile}}

ecs_count= epicseg.R getcounts {labeled_inputs} --regions ${References:hg38_chrom_esc}
           --target {{outputfile}} --binsize 200 --pairedend TRUE --nthreads 7

ecs_norm= epicseg.R normalizecounts {matrices} --nthreads 15 && touch {{outputfile}}

ecs_seg= epicseg.R segment {labeled_input} --regions ${References:hg38_chrom_esc}
         --nthreads 15 --nstates {num_states} --maxiter 250 --outdir {outdir}
         && touch {{outputfile}}

pk_zerone= zerone -q 5 --chip {signal_files} --mock {control_files} --list-output > {{outputfile}}

pkdiff_pepr= PePr --chip1 {chip1} --input1 {input1} --chip2 {chip2} --input2 {input2}
             --name {name} --input-directory {inputdir} --output-directory {outputdir}
             --peaktype {peaktype} --diff --threshold 0.01 --num-processors 5 --file-format bampe

pkpost_pepr= PePr-postprocess --peak={peak} --chip={chip} --input={input} --file-type=bam
             --remove-artefacts && touch {{outputfile}}

salmon_deep_quant= salmon quant --index ${EnvPaths:workdir}/references/idx_hg38_GENCv21_k31
                   --threads 14 --libType ISF --forgettingFactor 0.8 --useVBOpt --dumpEq --quiet
                   --seqBias --discardOrphansQuasi --numBootstraps 100
                   --geneMap ${EnvPaths:workdir}/references/gencode_v21_pctr_gene.tsv
                   -1 <(gunzip -c {reads1}) -2 <(gunzip -c {reads2}) -o {outpath}

deseq_deep_diff= run_deseq.R --loadpath {quantpath} --outpath {outpath}
                 --genemap ${EnvPaths:workdir}/references/gencode_v21_pctr_gene.tsv
                 && touch {{outputfile}}

conv_deep_diff= process_de_genes.py --annotation ${EnvPaths:workdir}/references/gencode.v21.annotation.gtf.gz
                --de-genes {{inputfile}} --diff-suffix _diff --norm-suffix _stable --out-root {subpath[0][1]}/bed_out

sciddo_deep_conv_cmm18= sciddo.py --workers 7 --config-dump ${EnvPaths:ruffuslog} convert
               --state-labels ${References:cmm_label} --state-colors ${References:cmm_color}
               --model-emissions ${References:cmm_model} --bin-size 200 --chrom-filter "(chr)?[0-9X]+(\s|$$)"
               --seg-format ChromHMM --chrom-sizes ${References:hg38_chromlen}
               --state-seg ${EnvPaths:workdir}/chromhmm/deep/segmentation/01_Hc01_LiHG_Ct_18_segments.bed
                           ${EnvPaths:workdir}/chromhmm/deep/segmentation/01_Hc02_LiHG_Ct_18_segments.bed
                           ${EnvPaths:workdir}/chromhmm/deep/segmentation/43_Hm01_BlMo_Ct_18_segments.bed
                           ${EnvPaths:workdir}/chromhmm/deep/segmentation/43_Hm03_BlMa_Ct_18_segments.bed
                           ${EnvPaths:workdir}/chromhmm/deep/segmentation/43_Hm03_BlMo_Ct_18_segments.bed
                           ${EnvPaths:workdir}/chromhmm/deep/segmentation/43_Hm05_BlMa_Ct_18_segments.bed
                           ${EnvPaths:workdir}/chromhmm/deep/segmentation/43_Hm05_BlMo_Ct_18_segments.bed
                           ${EnvPaths:workdir}/chromhmm/deep/segmentation/41_Hf02_LiHe_Ct_18_segments.bed
                           ${EnvPaths:workdir}/chromhmm/deep/segmentation/41_Hf03_LiHe_Ct_18_segments.bed
               --output ${EnvPaths:workdir}/sciddo/deep/cmm18/deep_sciddo_hg38_cmm18.h5
               --sample-labels REGEXP "^[0-9]+_(?P<LABEL>(?P<SEX>H(m|f|c))([0-9ab]+)_(?P<TISSUE>(Li|Bl|Co))(?P<CELLTYPE>(HG|He|Ma|Mo|Mu))_(?P<CONDITION>[A-Za-z]+))_\w+"
               && touch {{outputfile}}

sciddo_deep_conv_ecs= sciddo.py --workers 7 --config-dump ${EnvPaths:ruffuslog} convert
                --state-colors 9 --model-emissions {path[0]}/model.txt
                --bin-size 200 --chrom-filter "(chr)?[0-9X]+(\s|$$)"
                --seg-format EpiCSeg --chrom-sizes ${References:hg38_chromlen}
                --state-seg {path[0]}
                --output ${EnvPaths:workdir}/sciddo/deep/ecs{STNUM[0]}/deep_sciddo_hg38_ecs{STNUM[0]}.h5
                --sample-labels REGEXP "^segmentation_[0-9]+_(?P<LABEL>(?P<SEX>H(m|f|c))([0-9ab]+)_(?P<TISSUE>(Li|Bl|Co))(?P<CELLTYPE>(HG|He|Ma|Mo|Mu))_(?P<CONDITION>[A-Za-z]+))\.bed"
                && touch {{outputfile}}

sciddo_deep_stats= sciddo.py --workers 7 --config-dump ${EnvPaths:ruffuslog} stats
                --sciddo-data {path[0]}/{basename[0]}.h5 --counts
                && touch {{outputfile}}

sciddo_deep_score= sciddo.py --workers 7 --config-dump ${EnvPaths:ruffuslog} score
                   --sciddo-data {path[0]}/{basename[0]}.h5 --add-scoring ${use_scorings}
                   --null-obs 10 --replace
                   && touch {{outputfile}}

# above: prepare datasets
# below: analysis runs (baseline) and
# regular scan for all groups of replicates

sciddo_deep_base= sciddo.py --workers 15 --config-dump ${EnvPaths:ruffuslog} scan
                 --sciddo-data {path[0]}/{basename[0]}.h5 --run-baseline replicate
                 --scoring ${use_scorings} --compute-raw-stats 0
                 --run-out {{outputfile}}

sciddo_deep_scan= sciddo.py --workers 15 --config-dump ${EnvPaths:ruffuslog} scan
                  --sciddo-data {{inputfile}} --select-groups --group1 {grp1} --group2 {grp2}
                  --scoring ${use_scorings} --run-out {{outputfile}}
                  --count-length full --adjust-group-length adaptive
                  --merge-segments --compute-merged-stats 0 --compute-raw-stats 0

# dump data for downstream tools

# dump fully annotated state segmentation tracks
sciddo_deep_dump_seg= sciddo.py --workers 6 --config-dump ${EnvPaths:ruffuslog} dump
                      --data-type states
                      --data-file {path[0]}/{basename[0]}.h5
                      --output {path[0]}/data_dump/{SEGMENT[0]}_

# dump average score tracks for visualization
sciddo_deep_dump_emission= sciddo.py --workers 6 --config-dump ${EnvPaths:ruffuslog} dump
                           --data-type scores --average --scoring emission
                           --data-file {subpath[0][1]}/deep_sciddo_hg38_{SEGMENT[0]}.h5
                           --support-file {{inputfile}}
                           --output {{outputfile}}

sciddo_deep_dump_replicate= sciddo.py --workers 6 --config-dump ${EnvPaths:ruffuslog} dump
                            --data-type scores --average --scoring replicate
                            --data-file {subpath[0][1]}/deep_sciddo_hg38_{SEGMENT[0]}.h5
                            --support-file {{inputfile}}
                            --output {{outputfile}}

# dump segments
sciddo_deep_dump_hsp_ems= sciddo.py --workers 6 --config-dump ${EnvPaths:ruffuslog} dump
                          --data-type segments --scoring emission
                          --data-file {{inputfile}} --threshold 1
                          --output {{outputfile}}

sciddo_deep_dump_hsp_rep= sciddo.py --workers 6 --config-dump ${EnvPaths:ruffuslog} dump
                          --data-type segments --scoring replicate
                          --data-file {{inputfile}} --threshold 1
                          --output {{outputfile}}

# dump raw scan results
sciddo_deep_dump_raw_ems= sciddo.py --workers 6 --config-dump ${EnvPaths:ruffuslog} dump
                          --data-type raw --scoring emission
                          --data-file {{inputfile}}
                          --output {{outputfile}}

sciddo_deep_dump_raw_rep= sciddo.py --workers 6 --config-dump ${EnvPaths:ruffuslog} dump
                          --data-type raw --scoring replicate
                          --data-file {{inputfile}}
                          --output {{outputfile}}



# downstream tools

# convert bedGraph to bigWig tracks
bg_to_bw= bedGraphToBigWig {inputfile} ${References:hg38_chromlen} {outputfile}


btl_deep_isect_hsp= bedtools intersect -wo -a {inputfile1} -b {inputfile2} > {outputfile}

btl_deep_isect_genes= bedtools intersect -wao -header -names DIFF STABLE
                      -a {{inputfile}}
                      -b /TL/deep/fhgfs/projects/pebert/thesis/projects/statediff/deseq/bed_out/deseq2_{COMP[0]}_diff_body.bed
                      /TL/deep/fhgfs/projects/pebert/thesis/projects/statediff/deseq/bed_out/deseq2_{COMP[0]}_stable_body.bed
                      > {{outputfile}}

btl_deep_isect_prom= bedtools intersect -wao -header -names DIFF STABLE
                      -a {{inputfile}}
                      -b /TL/deep/fhgfs/projects/pebert/thesis/projects/statediff/deseq/bed_out/deseq2_{COMP[0]}_diff_promoter.bed
                      /TL/deep/fhgfs/projects/pebert/thesis/projects/statediff/deseq/bed_out/deseq2_{COMP[0]}_stable_promoter.bed
                      > {{outputfile}}

btl_deep_isect_rgb= bedtools intersect -wao -header -a {{inputfile}}
                    -b ${EnvPaths:workdir}/references/EnsRB_v78_hg38_multi.bed
                    > {{outputfile}}

btl_deep_isect_enh= bedtools intersect -wao -header -a {{inputfile}}
                    -b ${EnvPaths:workdir}/references/hg38_enh_genehancer.bed
                    > {{outputfile}}

# use cases:
# 1) enhancer switching: HG vs Mo (confirmed via EP300 overlap)

# first, overlap EP300 peaks with HG vs Mo HSPs
btl_uc1_isect_p300= bedtools intersect -u -a ${References:hepg2_p300}
                    -b {{inputfile}} >> {{outputfile}}

# check what EP300 peaks are not overlapping
btl_uc1_p300_uniq= bedtools intersect -v -a ${References:hepg2_p300}
                   -b {inputfile} >> {outputfile}

# dump HSP splits showing active to inactive enhancer switching
sciddo_uc1_enh_onoff= sciddo.py --workers 6 --config-dump ${EnvPaths:ruffuslog} dump
                      --data-type dynamics --scoring emission
                      --from-states 7 8 9 10 11
                      --to-states 13 15 16 17
                      --split-segments
                      --data-file {subpath[0][1]}/deep_sciddo_hg38_{SEG[0]}.h5
                      --support-file {{inputfile}}
                      --output {{outputfile}}

sciddo_uc1_enh_offon= sciddo.py --workers 6 --config-dump ${EnvPaths:ruffuslog} dump
                      --data-type dynamics --scoring emission
                      --to-states 7 8 9 10 11
                      --from-states 13 15 16 17
                      --split-segments
                      --data-file {subpath[0][1]}/deep_sciddo_hg38_{SEG[0]}.h5
                      --support-file {{inputfile}}
                      --output {{outputfile}}

# now intersect EP300 peaks with switching enhancer regions
btl_uc1_isect_switch= bedtools intersect -u -a {path[0]}/uc1_cmm18_HG_vs_Mo_p300_hsp.bed
                      -b {{inputfile}} >> {{outputfile}}




sciddo_deep_smprand= sciddo.py --workers 15 --config-dump ${EnvPaths:ruffuslog} sample
                  --sciddo-data {path[0]}/{basename[0]}.h5 --strategy random
                  --total-samples 200 --scoring ${use_scorings}
                  --run-out {{outputfile}}

sciddo_deep_conv_prv= sciddo.py --workers 7 --config-dump ${EnvPaths:ruffuslog} convert
               --state-labels ${References:cmm_label} --state-colors ${References:cmm_color}
               --model-emissions ${References:cmm_emissions} --bin-size 200 --chrom-filter "(chr)?[0-9X]+(\s|$$)"
               --seg-format ChromHMM --chrom-sizes ${References:hg38_chromlen}
               --state-seg ${EnvPaths:workdir}/chromhmm/deep/segmentation
               --output ${EnvPaths:workdir}/sciddo/deep/deep-prv_sciddo_hg38.h5
               --sample-labels REGEXP "^[0-9]+_(?P<LABEL>(?P<SEX>H(m|f|c))([0-9ab]+)_(?P<TISSUE>(Li|Bl|Co))(?P<CELLTYPE>(HG|He|Ma|Mo|Mu))_(?P<CONDITION>[A-Za-z]+))_\w+"
               && touch {{outputfile}}



sciddo_remc_conv= sciddo.py --workers 7 --config-dump ${EnvPaths:ruffuslog} convert
               --state-labels ${References:cmm_label} --state-colors ${References:cmm_color}
               --model-emissions ${References:cmm_emissions} --bin-size 200 --chrom-filter "(chr)?[0-9X]+(\s|$$)"
               --seg-format ChromHMM --chrom-sizes ${References:hg19_chromlen}
               --state-seg ${EnvPaths:workdir}/loaded_input/remc/state_seg
               --output ${EnvPaths:workdir}/sciddo/remc/remc_sciddo_hg19.h5
               --sample-labels REGEXP "^(?P<LABEL>E[0-9]+)_\w+"
               --design-matrix ${References:remc_design}
               && touch {{outputfile}}



[Samples]
libraries= H3K4me1 H3K4me3 H3K36me3 H3K27me3 H3K9me3 H3K27ac Input
deep_folder= /TL/deep/fhgfs/data/incoming/mirror/alignments/human/GRCh38
deep_samples= 41_Hf01_LiHe_Ct
    41_Hf02_LiHe_Ct
    41_Hf03_LiHe_Ct
    41_Hf05_LiHe_St
    41_Hf11_LiHe_St
    41_Hf14_LiHe_St
    41_Hm04_LiHe_St
    41_Hm07_LiHe_St
    41_Hm08_LiHe_St
    41_Hm09_LiHe_Ct
    41_Hm16_LiHe_Ct
    41_Hm25_LiHe_Ct
    43_Hm01_BlMo_Ct
    43_Hm03_BlMa_Ct
    43_Hm03_BlMo_Ct
    43_Hm05_BlMa_Ct
    43_Hm05_BlMo_Ct
    52_Hf3a_CoMu_Ct
    52_Hf3b_CoMu_UC
    52_Hm1a_CoMu_Ct
    52_Hm1b_CoMu_UC
    01_HepG2_LiHG_Ct1
    01_HepG2_LiHG_Ct2

[Ruffus]
use_threads= True
jobs= 50
verbose= 1
history_file= ${EnvPaths:ruffushist}/${Pipeline:name}_hist.sqlite
log_file= ${EnvPaths:ruffuslog}/${Pipeline:name}_ruffus.log

[JobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l h_vmem=15G,mem_free=10G,slots_free=2,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[ParallelJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l h_vmem=30G,mem_free=20G,slots_free=7,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[NodeJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l h_vmem=100G,mem_free=25G,slots_free=15,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[MemJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l h_vmem=60G,mem_free=35G,slots_free=5,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0
